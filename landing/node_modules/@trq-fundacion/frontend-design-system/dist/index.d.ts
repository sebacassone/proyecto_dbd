import React from 'react';

interface CardProps {
    type?: string;
    title: string;
    username: string;
    description: string;
    onClick?: () => void;
}
/**
 * A Card component that displays a title, username, and description.
 *
 * @component
 * @param {string} type - The type of the card.
 * @param {CardProps} props - The properties for the Card component.
 * @param {string} props.title - The title of the card.
 * @param {string} props.username - The username displayed on the card.
 * @param {string} props.description - The description displayed on the card.
 * @returns {JSX.Element} The rendered Card component.
 */
declare const Card: React.FC<CardProps>;

interface CommentProps$1 {
    author: string;
    email: string;
    text: string;
    avatarUrl?: string;
}
/**
 * A Comment component that displays an author, email, text, and avatar.
 *
 * @component
 * @example
 * <Comment
 *   author="John Doe"
 *   email="john@example.com"
 *   text="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
 *   avatarUrl="https://example.com/avatar.jpg"
 * />
 * @param {string} author - The author's name.
 * @param {string} email - The author's email.
 * @param {string} text - The comment text.
 * @param {string} avatarUrl - The URL of the author's avatar image.
 * @returns {JSX.Element} The rendered Comment component.
 */
declare const Comment: React.FC<CommentProps$1>;

interface ModalProps$1 {
    title: string;
    body: React.ReactNode;
    footer: React.ReactNode;
    isOpen: boolean;
    onClose: () => void;
}

interface ModalProps extends ModalProps$1 {
    type?: string;
}
/**
 * A Modal component that can render different types of modals.
 *
 * @component
 * @example
 * <Modal
 *   title="Modal Title"
 *   body="Modal content goes here."
 *   footer="Modal footer goes here."
 *   isOpen={true}
 *   onClose={() => console.log("Close modal")}
 * />
 */
declare const Modal: React.FC<ModalProps>;

interface CheckboxLoginProps$1 {
    title: string;
}
declare const CheckboxLogin: React.FC<CheckboxLoginProps$1>;

interface PrimaryButtonProps {
    text: string;
    color: 'primary' | 'inherit' | 'secondary' | 'success' | 'error' | 'info' | 'warning';
    onClick?: () => void;
}
/**
 * A Primary Button component.
 *
 * @component
 * @example
 * <PrimaryButton text="Primary Button" color="primary"/>
 *
 * @param {string} text - Button's text.
 * @param {string} color - Button's color based on Material UI palette.
 * @param onClick - Button's action.
 * @returns {JSX.Element} The rendered Button component.
 * @constructor
 */
declare const PrimaryButton: React.FC<PrimaryButtonProps>;

interface SecondaryButtonProps$1 {
    text: string;
    color: 'primary' | 'inherit' | 'secondary' | 'success' | 'error' | 'info' | 'warning';
    onClick?: () => void;
    isDisabled: boolean;
}
/**
 * A Secondary Button component.
 *
 * @component
 * @example
 * <SecondaryButton text="Secondary Button" color="primary"/>
 *
 * @param {string} text - Button's text.
 * @param {string} color - Button's color based on Material UI palette.
 * @param onClick - Button's action.
 * @returns {JSX.Element} The rendered Button component.
 * @constructor
 */
declare const SecondaryButton: React.FC<SecondaryButtonProps$1>;

interface WithStartIconEmergencyButtonProps {
    text: string;
    onClick?: () => void;
}
/**
 * A With start icon Emergency Button component.
 *
 * @component
 * @example
 * <WithStartIconEmergencyButton text="Emergency Button"/>
 *
 * @param {string} text - Button's text.
 * @param onClick - Button's action.
 * @returns {JSX.Element} The rendered Button component.
 * @constructor
 */
declare const WithStartIconEmergencyButton: React.FC<WithStartIconEmergencyButtonProps>;

interface WithStartIconWarningButtonProps {
    text: string;
    onClick?: () => void;
}
/**
 * A With start icon Warning Button component.
 *
 * @component
 * @example
 * <WithStartIconEmergencyButton text="Warning Button"/>
 *
 * @param {string} text - Button's text.
 * @param onClick - Button's action.
 * @returns {JSX.Element} The rendered Button component.
 * @constructor
 */
declare const WithStartIconWarningButton: React.FC<WithStartIconWarningButtonProps>;

interface AvatarProps {
    src: string;
    alt: string;
}
/**
 * An Avatar component.
 *
 * @component
 * @example
 * <AvatarComponent src="https://mui.com/static/images/avatar/1.jpg"/ alt="user's avatar">
 *
 * @param {string} src - The avatar's url.
 * @param {string} alt - The avatar's alt.
 * @returns {JSX.Element} The rendered Avatar component.
 */
declare const AvatarComponent: React.FC<AvatarProps>;

interface CommentProps {
    id: number;
    name: string;
    email: string;
    body: string;
}
interface PostProps {
    title: string;
    body: React.ReactNode;
    comments: CommentProps[];
    isOpen: boolean;
    onClose: () => void;
}
/**
 * Renders a post with a title, body, and comments as footer content in a modal.
 * @param {string} title - The title of the post.
 * @param {React.ReactNode} body - The body content of the post.
 * @param {CommentProps[]} comments - An array of comment objects containing id, name, email, and body.
 * @param {boolean} isOpen - A boolean value to control the modal's visibility.
 * @param {() => void} onClose - A function to close the modal.
 * @returns {JSX.Element} - The rendered post with comments in a modal.
 */
declare const Post: React.FC<PostProps>;

interface CardTitleProps {
    title: string;
    description: string;
}
interface SecondaryButtonProps {
    text: string;
    color: 'primary' | 'inherit' | 'secondary' | 'success' | 'error' | 'info' | 'warning';
    onClick?: () => void;
    isDisabled: true;
}
interface LoginProps {
    cardTitle: CardTitleProps;
    secondaryButton: SecondaryButtonProps;
    signInside: SignInSideProps;
    checkboxLogin: CheckboxLoginProps;
    result: (e: any) => void;
    api: string;
}
interface SignInSideProps {
    title: string;
    description: string;
    onChangeEmail?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onChangePassword?: (e: React.ChangeEvent<HTMLInputElement>) => void;
}
interface CheckboxLoginProps {
    title: string;
}
declare const Login: React.FC<LoginProps>;

export { AvatarComponent, Card, CheckboxLogin, Comment, Login, Modal, Post, PrimaryButton, SecondaryButton, WithStartIconEmergencyButton, WithStartIconWarningButton };
