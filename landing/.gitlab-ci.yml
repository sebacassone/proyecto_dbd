include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

# List of all variables
variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  # See https://github.com/docker-library/docker/pull/166
  DOCKER_TLS_CERTDIR: ""
  JIRA_HEADER: "Accept: application/json"
  JIRA_SERVER: "fundacionchile.atlassian.net"
  JIRA_USERNAME: "patricio.merino@fch.cl"
  JIRA_TOKEN: "twP9sTwMrA2vVRDpSyH0030D"

# List of all stages
stages:
  - build
  - test
  - deploy

# Construction of the Docker image base of this repo
.docker-push: &docker-push
  stage: build
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - preprod
    - master
    - tags
  except:
    variables:
      - $DEPLOY == "artifacts"
  tags:
    - docker
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker build
             -t "${CI_REGISTRY_IMAGE}${IMAGE_VARIANT}:${CI_COMMIT_REF_SLUG}"
             --build-arg "INCLUDED_ROUTES=${INCLUDED_ROUTES}"
             --build-arg "EXCLUDED_ROUTES=${EXCLUDED_ROUTES}"
             --build-arg "DEFAULT_REDIRECT=${DEFAULT_REDIRECT}"
             .
    - docker push "${CI_REGISTRY_IMAGE}${IMAGE_VARIANT}:${CI_COMMIT_REF_SLUG}"

docker-push-sml:
  <<: *docker-push
  variables:
    INCLUDED_ROUTES: "*"
    EXCLUDED_ROUTES: "public,authorities"
    DEFAULT_REDIRECT: "miners"
    IMAGE_VARIANT: "/sml"

# Lint
lint_allow_failure:
  stage: test
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - tags
  image: node:16
  allow_failure: true
  script:
    - rm -rf node_modules **/node_modules && rm -rf yarn.lock **/yarn.lock && yarn cache clean && yarn install --legacy-peer-deps
    - yarn lint > lint_allow_failure.txt
  artifacts:
    paths:
      - lint_allow_failure.txt

# Lint
lint:
  stage: test
  only:
    - preprod
    - master
  image: node:16
  script:
    - rm -rf node_modules **/node_modules && rm -rf yarn.lock **/yarn.lock && yarn cache clean && yarn install --legacy-peer-deps
    - yarn lint > lint.txt
  artifacts:
    paths:
      - lint.txt

# Unit tests
test:
  stage: test
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - preprod
    - master
    - tags
    - merge_requests
  image: node:16
  script:
    - yarn install --network-timeout 1000000
    - rm -rf node_modules **/node_modules && rm -rf yarn.lock **/yarn.lock && yarn cache clean && yarn install --legacy-peer-deps
    - yarn test --coverage
  artifacts:
    paths:
      - coverage

# Generates a report of the used libraries by this repo with the licenses
licenses_allow_failure:
  stage: test
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - tags
  image: node:17
  allow_failure: true
  script:
    - apt update 
    - apt install -y nodejs
    - apt install -y npm
    - npm install --force
    - npm install -g license-checker
    - license-checker --csv --out licenses.csv
  artifacts:
    paths: [licenses.csv]

# Generates a report of the used libraries by this repo with the licenses
licenses:
  stage: test
  only:
    - preprod
    - master
  image: node:17
  script:
    - apt update 
    - apt install -y nodejs
    - apt install -y npm
    - npm install --force
    - npm install -g license-checker
    - license-checker --csv --out licenses.csv
  artifacts:
    paths: [licenses.csv]

# Dependency-Check is a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed
# vulnerabilities contained within this project’s dependencies
owasp_dependency_check_allow_failure:
  stage: test
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - tags
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  script:
    # Job will scan the project root folder and fail if any vulnerabilities with CVSS > 0 are found
    - /usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL --project "$CI_PROJECT_NAME" --failOnCVSS 0 --exclude "yarn.lock"
    # Dependency Check will only fail the job based on CVSS scores, and in some cases vulnerabilities do not
    # have CVSS scores (e.g. those from NPM audit), so they don't cause failure.  To fail for any vulnerabilities
    # grep the resulting report for any "vulnerabilities" sections and exit if any are found (count > 0).
    - if [ $(grep -c "vulnerabilities" dependency-check-report.json) -gt 0 ]; then exit 2; fi
  allow_failure: true
  artifacts:
    when: always
    paths:
        # Save the HTML and JSON report artifacts
      - "./dependency-check-report.html"
      - "./dependency-check-report.json"

# Dependency-Check is a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed
# vulnerabilities contained within this project’s dependencies
owasp_dependency_check:
  stage: test
  only:
    - preprod
    - master
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  script:
    # Job will scan the project root folder and fail if any vulnerabilities with CVSS > 0 are found
    - /usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL --project "$CI_PROJECT_NAME" --failOnCVSS 0 --exclude "yarn.lock"
    # Dependency Check will only fail the job based on CVSS scores, and in some cases vulnerabilities do not
    # have CVSS scores (e.g. those from NPM audit), so they don't cause failure.  To fail for any vulnerabilities
    # grep the resulting report for any "vulnerabilities" sections and exit if any are found (count > 0).
    - if [ $(grep -c "vulnerabilities" dependency-check-report.json) -gt 0 ]; then exit 2; fi
  artifacts:
    when: always
    paths:
        # Save the HTML and JSON report artifacts
      - "./dependency-check-report.html"
      - "./dependency-check-report.json"

# Vulnerability scanning for Docker local images allows developers and development teams to review the
# security state of the container images and take actions to fix issues identified during the scan,
# resulting in more secure deployments
container_scan_allow_failure:
  stage: test
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - tags
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r container-scanning-report.json -l clair.log ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} || true
    - cat container-scanning-report.json
  artifacts:
    paths: [container-scanning-report.json]

# Vulnerability scanning for Docker local images allows developers and development teams to review the
# security state of the container images and take actions to fix issues identified during the scan,
# resulting in more secure deployments
container_scan:
  stage: test
  only:
    - preprod
    - master
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r container-scanning-report.json -l clair.log ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} || true
    - cat container-scanning-report.json
  artifacts:
    paths: [container-scanning-report.json]

# Vulnerability scanning: Control of security, compliance and health with a toolkit that will scan this repo.
test:vulnerabilities_allow_failure:
  stage: test
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - tags
  image:
    name: debricked/debricked-scan
    entrypoint: ["/gitlab-ci.sh"]
  script: echo "Done"
  allow_failure: true
  variables:
    DEBRICKED_TOKEN: $DEBRICKED_TOKEN

# Vulnerability scanning: Control of security, compliance and health with a toolkit that will scan this repo.
test:vulnerabilities:
  stage: test
  only:
    - preprod
    - master
  image:
    name: debricked/debricked-scan
    entrypoint: ["/gitlab-ci.sh"]
  script: echo "Done"
  variables:
    DEBRICKED_TOKEN: $DEBRICKED_TOKEN

# SonarQube is an automatic code review tool to detect bugs, vulnerabilities, and code smells in your code.
# It can integrate with your existing workflow to enable continuous code inspection across your project branches
# and pull requests.
sonar_allow_failure:
  stage: test
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - tags
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  script:
    # - run sonar scanner
    - sonar-scanner -Dsonar.projectBaseDir=$CI_PROJECT_DIR
                    -Dsonar.host.url=$SONAR_URL
                    -Dsonar.login=$SONAR_TOKEN
                    -Dsonar.branch.name=${CI_COMMIT_REF_SLUG}
                    -Dsonar.projectName=$CI_PROJECT_TITLE
                    -Dsonar.projectKey=$SONAR_PROJECT_KEY
                    -Dsonar.projectVersion=$CI_COMMIT_SHA
                    -Dsonar.sources="$CI_PROJECT_DIR/src"
                    -Dsonar.tests="$CI_PROJECT_DIR/src"
                    -Dsonar.exclusions=**/*.test.js
                    -Dsonar.test.inclusions=**/*.mock.js,__mocks__/*.*
                    -Dsonar.javascript.lcov.reportPaths="coverage/lcov.info" > sonar.txt
  allow_failure: true
  artifacts:
    paths: [sonar.txt]

# SonarQube is an automatic code review tool to detect bugs, vulnerabilities, and code smells in your code.
# It can integrate with your existing workflow to enable continuous code inspection across your project branches
# and pull requests.
sonar:
  stage: test
  only:
    - preprod
    - master
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  script:
    # - run sonar scanner
    - sonar-scanner -Dsonar.projectBaseDir=$CI_PROJECT_DIR
                    -Dsonar.host.url=$SONAR_URL
                    -Dsonar.login=$SONAR_TOKEN
                    -Dsonar.branch.name=${CI_COMMIT_REF_SLUG}
                    -Dsonar.projectName=$CI_PROJECT_TITLE
                    -Dsonar.projectKey=$SONAR_PROJECT_KEY
                    -Dsonar.projectVersion=$CI_COMMIT_SHA
                    -Dsonar.sources="$CI_PROJECT_DIR/src"
                    -Dsonar.tests="$CI_PROJECT_DIR/src"
                    -Dsonar.exclusions=**/*.test.js
                    -Dsonar.test.inclusions=**/*.mock.js,__mocks__/*.*
                    -Dsonar.javascript.lcov.reportPaths="coverage/lcov.info" > sonar.txt
  artifacts:
    paths: [sonar.txt]

# Unit tests: CDD Storybook
cdd_storybook_allow_failure:
  stage: test
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - tags
  image: node:16
  allow_failure: true
  script:
    - rm -rf node_modules **/node_modules && rm -rf yarn.lock **/yarn.lock && yarn cache clean && yarn install --legacy-peer-deps
    - yarn run build-storybook -- -o storybook-static
  artifacts:
    paths:
    - storybook-static

# Unit tests: CDD Storybook
cdd_storybook:
  stage: test
  only:
    - preprod
    - master
  image: node:16
  script:
    - rm -rf node_modules **/node_modules && rm -rf yarn.lock **/yarn.lock && yarn cache clean && yarn install --legacy-peer-deps
    - NODE_OPTIONS=--openssl-legacy-provider npm run build-storybook -- -o storybook-static
    - yarn run build-storybook -- -o storybook-static
  artifacts:
    paths:
    - storybook-static

# Unit tests: CDD Styleguidist
#cdd_styleguidist_allow_failure:
#  stage: test
#  only:
#    - dev
#    - fch-alpha
#    - infy-dev
#    - alpha
#    - tags
#  image: node:16
#  allow_failure: true
#  script:
#    - rm -rf node_modules **/node_modules && rm -rf yarn.lock **/yarn.lock && yarn cache clean && yarn install --legacy-peer-deps
#    - npx styleguidist build > styleguide.txt
#  artifacts:
#    paths:
#    - styleguide.txt

# Unit tests: CDD Styleguidist
#cdd_styleguidist:
#  stage: test
#  only:
#    - preprod
#    - master
#  image: node:16
#  script:
#    - rm -rf node_modules **/node_modules && rm -rf yarn.lock **/yarn.lock && yarn cache clean && yarn install --legacy-peer-deps
#    - npx styleguidist build > styleguide.txt
#  artifacts:
#    paths:
#    - styleguide.txt

# Deploy of the frontend
deploy-main:
  stage: deploy
  only:
    - dev
    - infy-dev
  image: alpine:3.8
  variables:
    TRIGGER_TOKEN: a04d93dc51289813818bea8044dda4
    TRIGGER_URL: https://gitlab.com/api/v4/projects/21321480/trigger/pipeline
  script:
    - apk add --update --no-cache curl
    - curl -v --fail -X POST -F token=${TRIGGER_TOKEN} -F ref=${CI_COMMIT_REF_SLUG} ${TRIGGER_URL} > deploy-main.txt
  artifacts:
    paths: [deploy-main.txt]

# Deploy of the frontend
deploy-manual:
  stage: deploy
  only:
    - fch-alpha
    - alpha
    - preprod
    - master
    - tags
  image: alpine:3.8
  when: manual
  allow_failure: true
  variables:
    TRIGGER_TOKEN: a04d93dc51289813818bea8044dda4
    TRIGGER_URL: https://gitlab.com/api/v4/projects/21321480/trigger/pipeline
  script:
    - apk add --update --no-cache curl
    - curl -v --fail -X POST -F token=${TRIGGER_TOKEN} -F ref=${CI_COMMIT_REF_SLUG} ${TRIGGER_URL} > deploy-main.txt
  artifacts:
    paths: [deploy-main.txt]

# Generate the documentation
doc:
  stage: deploy
  only:
    - dev
    - fch-alpha
    - infy-dev
    - alpha
    - preprod
    - master
    - tags
    - /^doc.*$/
  image: node:16
  before_script:
    - apt-get update
    - apt-get install -y graphviz graphviz-dev
  script:
    - mkdir -p doc1/dependencies
    - mkdir -p doc1/packages
    - rm -rf node_modules **/node_modules && rm -rf yarn.lock **/yarn.lock && yarn cache clean && yarn install --legacy-peer-deps
    # Dependencies
    - npm -g install madge --force
    - madge --image doc1/dependencies/dependencies.svg src
    # Packages
    - npm install arkit --save-dev --force
    - npx arkit src/ -o doc1/packages/packages.svg
  artifacts:
    paths:
      - doc1/

create_jira_test_fail:
  stage: deploy
  image: alpine:3.8
  when: on_failure
  before_script:
    - apk add --update --no-cache curl
  script: >-
    curl --request POST
    --url https://${JIRA_SERVER}/rest/api/3/issue
    --user $USER
    --header 'Accept: application/json'
    --header 'Content-Type: application/json'
    --data '{ "fields": { "project": { "key": "ST4" }, "summary": "'${CI_PROJECT_TITLE}': Test NOK in pipeline", "description": { "type": "doc", "version": 1, "content": [ { "type": "paragraph", "content": [ { "text": "'${CI_PIPELINE_URL}'", "type": "text" } ] } ] }, "issuetype": { "name": "Error" }, "customfield_10113" : "'${CI_PIPELINE_URL}'" } }'

jira:
  stage: test
  allow_failure: false
  before_script:
    - wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    - mv jq-linux64 /usr/bin/jq
    - chmod a+x /usr/bin/jq
    - apk add --update curl && rm -rf /var/cache/apk/*
  script:
    # extract the JIRA Id out of the Merge Request title. The following
    # logic assumes a Merge Request title must start with a valid JIRA issue id
    # and that all JIRA projects start with a letter
    - export MERGE_REQUEST_JIRA_ID=$(echo ${CI_MERGE_REQUEST_TITLE} | sed -r "s/^([A-Za-z][A-Za-z0-9]+-[0-9]+).*/\1/")
    # validate we successfully extracted a Jira Issue Id
    - test "${MERGE_REQUEST_JIRA_ID}" == $(echo ${CI_MERGE_REQUEST_TITLE} | sed -r "s/^([A-Za-z][A-Za-z0-9]+-[0-9]+).*/\1/")
    # try and get the relevant information from JIRA,
    # capture result in a variable so can parse and run multiple
    # tests and validation steps
    # following only gets the issue status information to minimise traffic and
    # optimise execution time
    - export JIRA_DETAIL=$(curl -v https://${JIRA_SERVER} --user ${JIRA_USERNAME}:${JIRA_TOKEN} -H "${JIRA_HEADER}" -X GET https://${JIRA_SERVER}/rest/api/2/issue/${MERGE_REQUEST_JIRA_ID}?fields=status)
    # extract the JIRA key id, this also validates JIRA issue referenced is valid
    - echo ${JIRA_DETAIL} | jq -e '.key'
    # optionally test status of the JIRA issue matches a desired "status"
    #- test -z "$(echo ${JIRA_DETAIL} | jq '.fields.status.name' | sed -r "s/\"(Open|In Progress)\"//")")"
  only:
    - merge_requests
